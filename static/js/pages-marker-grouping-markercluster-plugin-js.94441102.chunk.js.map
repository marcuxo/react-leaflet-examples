{"version":3,"sources":["../node_modules/react-leaflet/esm/Marker.js","pages/marker-grouping-markercluster-plugin.js","util/tileLayer.js","../node_modules/react-leaflet/esm/Popup.js"],"names":["Marker","createLayerComponent","ctx","position","options","instance","LeafletMarker","context","overlayContainer","marker","props","prevProps","setLatLng","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","dragging","draggable","enable","disable","center","points","lat","lng","title","MapWrapper","className","zoom","scrollWheelZoom","tileLayer","map","index","attribution","url","Popup","createOverlayComponent","LeafletPopup","element","setOpen","onClose","onOpen","useEffect","onPopupOpen","event","popup","update","onPopupClose","on","popupopen","popupclose","openOn","bindPopup","off","removeLayer"],"mappings":"+MAEaA,EAASC,aAAqB,WAGxCC,GAAK,IAFNC,EAEM,EAFNA,SACGC,EACG,4BACAC,EAAW,IAAIC,SAAcH,EAAUC,GAC7C,MAAO,CACLC,WACAE,QAAS,2BAAKL,GAAP,IACLM,iBAAkBH,QAGrB,SAAsBI,EAAQC,EAAOC,GAClCD,EAAMP,WAAaQ,EAAUR,UAC/BM,EAAOG,UAAUF,EAAMP,UAGP,MAAdO,EAAMG,MAAgBH,EAAMG,OAASF,EAAUE,MACjDJ,EAAOK,QAAQJ,EAAMG,MAGG,MAAtBH,EAAMK,cAAwBL,EAAMK,eAAiBJ,EAAUI,cACjEN,EAAOO,gBAAgBN,EAAMK,cAGV,MAAjBL,EAAMO,SAAmBP,EAAMO,UAAYN,EAAUM,SACvDR,EAAOS,WAAWR,EAAMO,SAGH,MAAnBR,EAAOU,UAAoBT,EAAMU,YAAcT,EAAUS,aACnC,IAApBV,EAAMU,UACRX,EAAOU,SAASE,SAEhBZ,EAAOU,SAASG,e,+HC5BhBC,EAAS,CAAC,SAAU,UAEpBC,EAAS,CACb,CACEC,IAAK,mBACLC,IAAK,kBACLC,MAAO,WAET,CACEF,IAAK,kBACLC,IAAK,mBACLC,MAAO,WAET,CACEF,IAAK,mBACLC,IAAK,kBACLC,MAAO,WAET,CACEF,IAAK,kBACLC,IAAK,mBACLC,MAAO,YA2BIC,UAvBI,WACjB,OACE,eAAC,IAAD,CACEC,UAAU,oBACVN,OAAQA,EACRO,KAAM,GACNC,iBAAiB,EAJnB,UAOE,cAAC,IAAD,eAAeC,MAEf,cAAC,IAAD,UACGR,EAAOS,KAAI,WAAsBC,GAAtB,IAAGT,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,MAAb,OACV,cAAC,IAAD,CAAoBxB,SAAU,CAACsB,EAAKC,GAApC,SACE,cAAC,IAAD,UAAQC,KADGO,a,gCCvCRF,IALG,CAChBG,YAAa,2EACbC,IAAK,uD,gCCFP,6DAGaC,EAAQC,aAAuB,SAAqB5B,EAAOH,GACtE,MAAO,CACLF,SAAU,IAAIkC,QAAa7B,EAAOH,EAAQC,kBAC1CD,cAED,SAA2BiC,EAASjC,EAASG,EAAO+B,GAAS,IAE5DC,EAGEhC,EAHFgC,QACAC,EAEEjC,EAFFiC,OACAxC,EACEO,EADFP,SAEFyC,qBAAU,WAAoB,IAE1BvC,EACEmC,EADFnC,SAGF,SAASwC,EAAYC,GACfA,EAAMC,QAAU1C,IAClBA,EAAS2C,SACTP,GAAQ,GACE,MAAVE,GAA0BA,KAI9B,SAASM,EAAaH,GAChBA,EAAMC,QAAU1C,IAClBoC,GAAQ,GACG,MAAXC,GAA2BA,KAqB/B,OAjBAnC,EAAQ0B,IAAIiB,GAAG,CACbC,UAAWN,EACXO,WAAYH,IAGkB,MAA5B1C,EAAQC,kBAEM,MAAZL,GACFE,EAASO,UAAUT,GAGrBE,EAASgD,OAAO9C,EAAQ0B,MAGxB1B,EAAQC,iBAAiB8C,UAAUjD,GAG9B,WACLE,EAAQ0B,IAAIsB,IAAI,CACdJ,UAAWN,EACXO,WAAYH,IAEd1C,EAAQ0B,IAAIuB,YAAYnD,MAEzB,CAACmC,EAASjC,EAASkC,EAASC,EAASC,EAAQxC","file":"static/js/pages-marker-grouping-markercluster-plugin-js.94441102.chunk.js","sourcesContent":["import { createLayerComponent } from '@react-leaflet/core';\nimport { Marker as LeafletMarker } from 'leaflet';\nexport const Marker = createLayerComponent(function createMarker({\n  position,\n  ...options\n}, ctx) {\n  const instance = new LeafletMarker(position, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateMarker(marker, props, prevProps) {\n  if (props.position !== prevProps.position) {\n    marker.setLatLng(props.position);\n  }\n\n  if (props.icon != null && props.icon !== prevProps.icon) {\n    marker.setIcon(props.icon);\n  }\n\n  if (props.zIndexOffset != null && props.zIndexOffset !== prevProps.zIndexOffset) {\n    marker.setZIndexOffset(props.zIndexOffset);\n  }\n\n  if (props.opacity != null && props.opacity !== prevProps.opacity) {\n    marker.setOpacity(props.opacity);\n  }\n\n  if (marker.dragging != null && props.draggable !== prevProps.draggable) {\n    if (props.draggable === true) {\n      marker.dragging.enable();\n    } else {\n      marker.dragging.disable();\n    }\n  }\n});","import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport MarkerClusterGroup from 'react-leaflet-markercluster';\r\n\r\nimport 'react-leaflet-markercluster/dist/styles.min.css';\r\nimport tileLayer from '../util/tileLayer';\r\n\r\nconst center = [52.22977, 21.01178];\r\n\r\nconst points = [\r\n  {\r\n    lat: 52.230020586193795,\r\n    lng: 21.01083755493164,\r\n    title: 'point 1'\r\n  },\r\n  {\r\n    lat: 52.22924516170657,\r\n    lng: 21.011320352554325,\r\n    title: 'point 2'\r\n  },\r\n  {\r\n    lat: 52.229511304688444,\r\n    lng: 21.01270973682404,\r\n    title: 'point 3'\r\n  },\r\n  {\r\n    lat: 52.23040500771883,\r\n    lng: 21.012146472930908,\r\n    title: 'point 4'\r\n  },\r\n];\r\n\r\nconst MapWrapper = () => {\r\n  return (\r\n    <MapContainer\r\n      className=\"markercluster-map\"\r\n      center={center}\r\n      zoom={15}\r\n      scrollWheelZoom={false}\r\n    >\r\n\r\n      <TileLayer {...tileLayer} />\r\n\r\n      <MarkerClusterGroup>\r\n        {points.map(({ lat, lng, title }, index) => (\r\n          <Marker key={index} position={[lat, lng]}>\r\n            <Popup>{title}</Popup>\r\n          </Marker>\r\n        ))}\r\n      </MarkerClusterGroup>\r\n\r\n    </MapContainer>\r\n  )\r\n}\r\n\r\nexport default MapWrapper;","const tileLayer = {\r\n  attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\r\n  url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n}\r\n\r\nexport default tileLayer;","import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen,\n    position\n  } = props;\n  useEffect(function addPopup() {\n    const {\n      instance\n    } = element;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n      context.map.removeLayer(instance);\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});"],"sourceRoot":""}